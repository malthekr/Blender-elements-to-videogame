import bpy
import aud
import os

scene = bpy.context.scene

# Finder sti til filen for mappen til Blenderfilen
filepath = bpy.data.filepath
directory = os.path.dirname(filepath)

# Bestemmer hvilken lydfil der afspilles
device = aud.device()
sound = aud.Factory(os.path.join(directory, '.\\skrr.wav'))

cone = None
cube = None

# Assigner automatisk hvilket objekt der er Cone og Cube.
if scene.objects[0].name == 'Cone':
    cube = scene.objects[1]
    cone = scene.objects[0]
else:
    cube = scene.objects[0]
    cone = scene.objects[1]

# Bestemmer objekternes scale på x-, y- og z-aksen
cube.scale=(1,1,1) 
cone.scale=(1,1,1)

# Bestemmer objektets lokation i x-, y- og z-aksen
cube.location = (0,0,0)
cone.location = (4,4,4)

# Definerer hitbox for collision detection
def collisionTop():
    ctop = cube.location.z + cube.dimensions.z*0.5    
    vbutt = cone.location.z - cone.dimensions.z*0.5
    if ctop >= vbutt:
        return True
    else:
        return False

def collisionButt():
    cbutt = cube.location.z - cube.dimensions.z*0.5
    vtop = cone.location.z + cone.dimensions.z*0.5
    if cbutt <= vtop:
        return True
    else:
        return False

def collisionFrontx():
    cfrontx = cube.location.x + cube.dimensions.x*0.5    
    vfrontx = cone.location.x - cone.dimensions.x*0.5
    if cfrontx >= vfrontx:
        return True
    else:
        return False

def collisionBackx():
    cbackx = cube.location.x - cube.dimensions.x*0.5
    vbackx = cone.location.x + cone.dimensions.x*0.5
    if cbackx <= vbackx:
        return True
    else:
        return False

def collisionFronty():
    cfronty = cube.location.y + cube.dimensions.y*0.5
    vfronty = cone.location.y - cone.dimensions.y*0.5
    if cfronty >= vfronty:
        return True
    else:
        return False

def collisionBacky():
    cbacky = cube.location.y - cube.dimensions.y*0.5
    vbacky = cone.location.y + cone.dimensions.y*0.5
    if cbacky <= vbacky:
        return True
    else:
        return False 

# Hvis collision detection er True afspilles lyd og objekt ændres
def cubeCollision(scene):
    if collisionTop() and collisionButt() and collisionFrontx() and collisionBackx() and collisionFronty() and collisionBacky():
        cube.scale=(3,1,1)
        handle = device.play(sound)
    else:
        cube.scale=(1,1,1)

scene.frame_start = 0
scene.frame_end = 120

# Sletter forrige keyframes når scriptet køres
cone.animation_data_clear()

scene.frame_set(0)
cone.keyframe_insert(data_path="location", index=-1)
scene.frame_set(20)
cone.location.z -= 4
cone.keyframe_insert(data_path="location", index=-1)
scene.frame_set(40)
cone.location.x -= 8
cone.location.y -= 8
cone.keyframe_insert(data_path="location", index=-1)
scene.frame_set(60)
cone.location.z -= 4
cone.keyframe_insert(data_path="location", index=-1)
scene.frame_set(80)
cone.location.z += 4
cone.keyframe_insert(data_path="location", index=-1)
scene.frame_set(100)
cone.location.x += 8
cone.location.y += 8
cone.keyframe_insert(data_path="location", index=-1)
scene.frame_set(120)
cone.location.z += 4
cone.keyframe_insert(data_path="location", index=-1)

# Tjekker collision detection hver gang der sker en ændring
del bpy.app.handlers.frame_change_post[:]
bpy.app.handlers.frame_change_post.append(cubeCollision)

# Starter animation
bpy.ops.screen.animation_play()